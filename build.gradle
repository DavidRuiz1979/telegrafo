plugins {
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id 'groovy'
    id 'jacoco'
    id 'org.sonarqube' version '2.7.1'
    id "com.gorylenko.gradle-git-properties" version "2.2.1"
}

group = 'com.telegrafo'
version = '0.1.0'
sourceCompatibility = '11'

def app = [
        group: "com.telegrafo",
        name: "telegrafo",
        version: "0.1.0"
]

ext {
    set('groovyVersion', "2.5.7")
    set('logstashLogbackEncoderVersion', "5.3")
    set('springCloudVersion', "Hoxton.RELEASE")
    set('mssqlJdbcVersion', "7.4.1.jre11")
    set('swaggerVersion', "2.9.2")
    set('spockVersion', "1.3-groovy-2.5")
    set('byteBuddyVersion', "1.9.3")
    set('objenesisVersion', "2.6")
    set('httpResponseVersion', "0.1.0-RELEASE")

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

springBoot {
    buildInfo {
        properties {
            group = app.group
            version = app.version
            name = app.name
        }
    }
}

repositories {
    jcenter()
    mavenCentral()
    /*maven {
        url "http://nexus.redb.ee/content/repositories/redbee-snapshot/"
        credentials {
            username 'usernameNexusRedBee'
            password 'passwordNexusRedBee'
        }
    }
    maven {
        url "http://nexus.redb.ee/content/repositories/redbee-release/"
        credentials {
            username 'usernameNexusRedBee'
            password 'passwordNexusRedBee'
        }
    }*/
}


jacoco {
    toolVersion = "0.8.5"
}

// ==== Test
jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
        csv.enabled false
        xml.destination file("${buildDir}/jacoco/jacoco.xml")
    }
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
    finalizedBy jacocoTestReport

    testLogging {
        exceptionFormat = 'full'
        events "PASSED", "FAILED", "SKIPPED"

    }
}


dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-logging")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-data-jdbc")


    implementation("org.springframework.cloud:spring-cloud-starter-sleuth")
    implementation("org.springframework.cloud:spring-cloud-starter-config")

    implementation("com.microsoft.sqlserver:mssql-jdbc:${mssqlJdbcVersion}")

    implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackEncoderVersion}")

    implementation("io.springfox:springfox-swagger2:${swaggerVersion}")
    implementation("io.springfox:springfox-swagger-ui:${swaggerVersion}")


    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testCompile("org.codehaus.groovy:groovy-all:${groovyVersion}")
    testCompile("org.spockframework:spock-spring:${spockVersion}")
    testCompile("org.spockframework:spock-core:${spockVersion}")
    testRuntime("net.bytebuddy:byte-buddy:${byteBuddyVersion}")
    testRuntime("org.objenesis:objenesis:${objenesisVersion}")
}
